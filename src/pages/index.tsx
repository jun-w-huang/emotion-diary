import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import LoadingSpinner from "~/components/LoadingSpinner";
import { Sidebar } from "~/components/Sidebar";
import { EmotionButton } from "~/components/EmotionButton";
import {
  Context,
  Dispatch,
  createContext,
  useContext,
  useReducer,
} from "react";
import { EmotionEvent } from "@prisma/client";
import CreateEmotionRHF from "~/components/RHF/CreateEmotionRHF";
import { MemoizedCalendar } from "~/components/Calendar/Calendar";

export interface FormModalDetails {
  isShowingModal: boolean;
  date: Date | undefined;
  currentEvent: EmotionEvent | undefined;
}

const initialState: FormModalDetails = {
  isShowingModal: false,
  date: new Date(),
  currentEvent: undefined,
};

type ActionType =
  | { type: "open selected"; currentEvent: EmotionEvent }
  | {
      type: "open new";
      date: Date;
    }
  | { type: "close" };

function reducer(
  state: FormModalDetails,
  action: ActionType
): FormModalDetails {
  switch (action.type) {
    case "open selected":
      return {
        isShowingModal: true,
        date: action.currentEvent.start,
        currentEvent: action.currentEvent,
      };
    case "open new":
      return {
        isShowingModal: true,
        date: action.date,
        currentEvent: undefined,
      };
    case "close":
      return {
        isShowingModal: false,
        date: undefined,
        currentEvent: undefined,
      };
    default:
      return state;
  }
}

interface CreateEmotionRHFModalContext {
  state: FormModalDetails;
  dispatch: Dispatch<ActionType>;
}

export const CreateEmotionRHFModalContext = createContext<
  CreateEmotionRHFModalContext | undefined
>(undefined);

// https://reacttraining.com/blog/react-context-with-typescript
export function useCreateEmotionRHFModalContext() {
  const context = useContext(CreateEmotionRHFModalContext);
  if (context === undefined)
    throw Error(
      "CreateEmotionRHFModalContext must be used inside of a component that is a child of the provider, otherwise it will not function correctly."
    );

  return context;
}

const Home: NextPage = () => {
  const { isSignedIn, user } = useUser();
  const { data: events, isLoading } = api.emotionEvent.getMyEvents.useQuery(
    undefined,
    {
      refetchOnMount: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
    }
  );

  const [state, dispatch] = useReducer(reducer, initialState);

  if (!isSignedIn || !user) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="flex flex-col items-center justify-center">
          <h1 className="py-5 text-5xl text-black">Emotion Diary</h1>
          <div className="flex h-12 w-48 items-center justify-center rounded-lg border bg-slate-500 text-white">
            <SignInButton>
              <EmotionButton className="flex h-12 w-48 items-center justify-center rounded-lg bg-slate-100 text-emotionGray">
                Sign in
              </EmotionButton>
            </SignInButton>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Emotion Diary</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/emotionSVGs/joy.svg" />
      </Head>

      <main className="flex h-screen flex-col items-center">
        <div className="flex h-screen w-full flex-row">
          <CreateEmotionRHFModalContext.Provider value={{ state, dispatch }}>
            {state.isShowingModal && (
              <CreateEmotionRHF
                existingEvent={state.currentEvent}
                date={state.date}
                closeModal={() => dispatch({ type: "close" })}
              />
            )}
            <Sidebar user={user}/>
            <div className="flex h-full w-full flex-col items-center justify-center px-4 py-12">
              {events && <MemoizedCalendar events={events} />}
            </div>
          </CreateEmotionRHFModalContext.Provider>
        </div>
      </main>
    </>
  );
};

export default Home;
