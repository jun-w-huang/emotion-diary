import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import LoadingSpinner from "~/components/LoadingSpinner";
import { Sidebar } from "~/components/Sidebar";
import { EmotionButton } from "~/components/EmotionButton";
import { useReducer } from "react";
import CreateEmotionRHF from "~/components/RHF/CreateEmotionRHF";
import { MemoizedCalendar } from "~/components/Calendar/Calendar";
import {
  EmotionRHFModalContext,
  initialEmotionRHFState,
} from "../context/EmotionRHFModalContext";

import { emotionRHFReducer } from "../context/EmotionRHFModalReducer";
import { DetailedDayModalContext, initialDetailedDayModalState } from "../context/DetailedDayModalContext";
import { detailedDayModalReducer } from "../context/DetailedDayModalReducer";
import DetailedDayModal from "~/components/Calendar/DetailedDayModal";

const Home: NextPage = () => {
  const { isSignedIn, user } = useUser();
  const { data: events, isLoading } = api.emotionEvent.getMyEvents.useQuery(
    undefined,
    {
      refetchOnMount: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
    }
  );

  const [emotionRHFState, emotionRHFDispatch] = useReducer(
    emotionRHFReducer,
    initialEmotionRHFState
  );
  const [detailedDayModalState, detailedDayModalDispatch] = useReducer(
    detailedDayModalReducer,
    initialDetailedDayModalState
  );

  if (!isSignedIn || !user) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="flex flex-col items-center justify-center">
          <h1 className="py-5 text-5xl text-black">Emotion Diary</h1>
          <div className="flex h-12 w-48 items-center justify-center rounded-lg border bg-slate-500 text-white">
            <SignInButton>
              <EmotionButton className="flex h-12 w-48 items-center justify-center rounded-lg bg-slate-100 text-emotionGray">
                Sign in
              </EmotionButton>
            </SignInButton>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Emotion Diary</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/emotionSVGs/joy.svg" />
      </Head>

      <main className="flex h-screen flex-col items-center">
        <div className="flex h-screen w-full flex-row">
          <EmotionRHFModalContext.Provider
            value={{ state: emotionRHFState, dispatch: emotionRHFDispatch }}
          >
            {emotionRHFState.isShowingModal && (
              <CreateEmotionRHF
                existingEvent={emotionRHFState.currentEvent}
                date={emotionRHFState.date}
                closeModal={() => emotionRHFDispatch({ type: "close" })}
              />
            )}
            <DetailedDayModalContext.Provider value={{state: detailedDayModalState, dispatch: detailedDayModalDispatch}}>
            <Sidebar user={user}>
              {detailedDayModalState.isShowingModal && (
                <DetailedDayModal
                  dateEvents={detailedDayModalState.dateEvents}
                  closeModal={() =>
                    detailedDayModalDispatch({
                      type: "close",
                    })
                  }
                />
              )}
            </Sidebar>
            <div className="flex h-full w-full flex-col items-center justify-center px-4 py-12">
              {events && <MemoizedCalendar events={events} />}
            </div>
            </DetailedDayModalContext.Provider>
          </EmotionRHFModalContext.Provider>
        </div>
      </main>
    </>
  );
};

export default Home;
